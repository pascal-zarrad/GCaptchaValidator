# Do a stable deployment from the master branch
name: Deploy Release

# Run job on push to master
on:
    push:
        branches:
            - 'master'

jobs:
    release:
        runs-on: ubuntu-18.04
        steps:
            - name: Check out Git repository
              uses: actions/checkout@v2

            - name: Install xmlstarlet
              run: |
                  sudo apt-get update -y
                  sudo apt-get install -y xmlstarlet

            - name: Install Java and Maven
              uses: actions/setup-java@v1
              with:
                  java-version: 8

            - name: Prepare release
              run: |
                  export GPG_TTY=$(tty)

            - name: Release Maven package
              uses: samuelmeuli/action-maven-publish@v1
              with:
                  gpg_private_key: ${{ secrets.gpg_private_key }}
                  gpg_passphrase: ${{ secrets.gpg_passphrase }}
                  nexus_username: ${{ secrets.nexus_username }}
                  nexus_password: ${{ secrets.nexus_password }}

            - name: Upload build artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: gcaptchavalidator
                  path: target

            - name: Upload coverage report
              uses: actions/upload-artifact@v2
              with:
                  name: code-coverage-report
                  path: target/site/jacoco

            - name: Prepare git for tag
              run: |
                  git config --global user.email "p.zarrad@outlook.de"
                  git config --global user.name "Pascal Zarrad"

            - name: Create release tag
              run: |
                  current_version=$(xmlstarlet sel -N pom="http://maven.apache.org/POM/4.0.0" -t \
                      -m '/pom:project/pom:version' -v . -n pom.xml)
                  git fetch --all --tags --force
                  git tag -a v${current_version} -m "Release version ${current_version}"
                  git push origin v${current_version}
                  plain_version_env="::set-env name=CURRENT_PROJECT_VERSION::$current_version"
                  version_env="::set-env name=CURRENT_TAG_VERSION::v$current_version"
                  echo $version_env
                  echo $plain_version_env

            - name: Generate changelog
              run: |
                  mvn changelog:conventional

            - name: Create release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.CURRENT_TAG_VERSION }}
                  release_name: Release ${{ env.CURRENT_TAG_VERSION }}
                  body_path: CHANGELOG.md
                  draft: false
                  prerelease: false

            - name: Upload artifact
              id: upload-release-asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
                  asset_path: ./target/gcaptchavalidator-${{ env.CURRENT_PROJECT_VERSION }}-jar-with-dependencies.jar
                  asset_name: gcaptchavalidator-${{ env.CURRENT_PROJECT_VERSION }}.jar
                  asset_content_type: application/java-archive
